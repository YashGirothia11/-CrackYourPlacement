Given the root of a binary tree, return the sum of all left leaves.
A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.

Example 2:
Input: root = [1]
Output: 0
 

Constraints:
The number of nodes in the tree is in the range [1, 1000].
-1000 <= Node.val <= 1000

==========================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    void getLeftSum(TreeNode* root, int &sum){
        if(!root) return;
        if(root->left && !root->left->left && !root->left->right)//cheaking if left exists and the left is a leaf node (i.e it has no children itself)
           sum+=root->left->val;
        getLeftSum(root->left, sum);
        getLeftSum(root->right, sum);
    }
    int sumOfLeftLeaves(TreeNode* root) {
       int sum = 0;
       getLeftSum(root, sum);
       return sum;
    }
};
