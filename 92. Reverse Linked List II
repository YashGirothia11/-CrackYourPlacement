Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
 

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

================================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (left == right) return head;
        ListNode* temp = head;
        int i = 1;
        ListNode *l, *r, *prev = NULL, *next = NULL;
        while (i < left) {
            prev = temp;
            temp = temp->next;
            i++;
        }
        l = temp;
        while (i < right) {
            temp = temp->next;
            i++;
        }
        r = temp;
        if (temp->next) {
            next = temp->next;
        }
        if (prev != NULL) {
            prev->next = r;
        }
        else {
            head = r;
        }
        temp = l;
        while (temp != next) {
            ListNode* curr = temp->next;
            temp->next = prev;
            prev = temp;
            temp = curr;
        }
        l->next = next;
        return head;
    }  
};
