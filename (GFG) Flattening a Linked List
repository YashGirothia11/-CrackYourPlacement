Given a Linked List, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked lists is in sorted order.
Flatten the Link List so all the nodes appear in a single level while maintaining the sorted order.

Note: The flattened list will be printed using the bottom pointer instead of the next pointer. Look at the printList() function in the driver code for more clarity.

Example 01:
Input:
Output:  5-> 7-> 8- > 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)

Example 02:
Input:
Output: 5-> 7-> 8-> 10-> 19-> 22-> 28-> 30-> 50
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)

======================================================================================================================================================================

# Code of the above question 

#include <bits/stdc++.h>
using namespace std;
class Node {
public:
    int data;
    Node *next, *bottom;
    Node(int new_data) {
        data = new_data;
        next = bottom = NULL;
    }
};
Node* flatten(Node* root) {
    vector<int> values;
    while (root != NULL) {
        values.push_back(root->data);
        Node* temp = root->bottom;
        while (temp != NULL) {
            values.push_back(temp->data);
            temp = temp->bottom;
        }
        root = root->next;
    }
    sort(values.begin(), values.end());
    Node* tail = NULL;
    Node* head = NULL;
    for (int i = 0; i < values.size(); i++) {
        Node* newNode = new Node(values[i]);
        if (head == NULL) {
            head = newNode;
        }
        else {
            tail->bottom = newNode;
        }
        tail = newNode;
    }
    return head;
}
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->bottom;
    }
    cout << endl;
}
int main() {
    Node* head = new Node(5);
    head->bottom = new Node(7);
    head->bottom->bottom = new Node(8);
    head->bottom->bottom->bottom = new Node(30);
    head->next = new Node(10);
    head->next->bottom = new Node(20);
    head->next->next = new Node(19);
    head->next->next->bottom = new Node(22);
    head->next->next->bottom->bottom = new Node(50);
    head->next->next->next = new Node(28);
    head = flatten(head);
    printList(head);
    return 0;
}
