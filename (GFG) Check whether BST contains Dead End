Given a Binary Search Tree that contains unique positive integer values greater than 0. The task is to complete the function isDeadEnd which returns true if the BST contains a dead end else returns false. Here Dead End means a leaf node, at which no other node can be inserted.

Example 1:
Input :   
               8
             /   \ 
           5      9
         /  \     
        2    7 
       /
      1               
Output : 
Yes
Explanation : 
Node 1 is a Dead End in the given BST.

Example 2:
Input :     
              8
            /   \ 
           7     10
         /      /   \
        2      9     13

Output : 
Yes
Explanation : 
Node 9 is a Dead End in the given BST.
Your Task: You don't have to input or print anything. Complete the function isDeadEnd() which takes BST as input and returns a boolean value.
Expected Time Complexity: O(N), where N is the number of nodes in the BST.
Expected Space Complexity: O(N)

Constraints:
1 <= N <= 1001
1 <= Value of Nodes <= 10001

====================================================================================================================================================================================

# Code of the above question 

#include <bits/stdc++.h>
using namespace std;
struct Node {
	int data;
	struct Node *left, *right;
};
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}
struct Node* insert(struct Node* node, int key)
{
	if (node == NULL)
		return newNode(key);
	if (key < node->data)
		node->left = insert(node->left, key);
	else if (key > node->data)
		node->right = insert(node->right, key);
	return node;
}
bool deadEnd(Node* root, int min=1, int max=INT_MAX)
{
	if (!root)
		return false;
	if (min == max)
		return true;
	return deadEnd(root->left, min, root->data - 1) || deadEnd(root->right, root->data + 1, max);
}
int main()
{
	Node* root = NULL;
	root = insert(root, 8);
	root = insert(root, 5);
	root = insert(root, 2);
	root = insert(root, 3);
	root = insert(root, 7);
	root = insert(root, 11);
	root = insert(root, 4);
	if (deadEnd(root) == true)
		cout << "Yes " << endl;
	else
		cout << "No " << endl;
	return 0;
}
