A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

======================================================================================================================================================================================

# Code of the above question  

class Solution {
public:
    int ladderLength(string bw, string ew, vector<string>& wl) {
        wl.insert(wl.begin(), bw);
        int n = wl.size();
        int ewIndex = -1;
        vector<vector<int>> graph(n);
        for (int i = 0; i < n; i++) {
            if (wl[i] == ew) ewIndex = i;
            for (int j = i + 1; j < n; j++) {
                int matched = 0;
                for (int k = 0; k < bw.size(); k++) {
                    if (wl[i][k] == wl[j][k]) matched++;
                }
                if (matched == bw.size() - 1) {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }
        if (ewIndex == -1) return 0; 
        vector<int> distance(n, INT_MAX);
        distance[0] = 0;
        queue<int> q;
        q.push(0);

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (int neighbor : graph[node]) {
                if (distance[node] + 1 < distance[neighbor]) {
                    distance[neighbor] = distance[node] + 1;
                    q.push(neighbor);
                }
            }
        }
        return distance[ewIndex] == INT_MAX ? 0 : distance[ewIndex] + 1;
    }
};
