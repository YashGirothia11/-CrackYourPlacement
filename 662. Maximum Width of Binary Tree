Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.

 
Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:
Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:
Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
 
Constraints:
The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100

========================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        long width=0;
        queue<pair<TreeNode*, long>> q;
        q.push({root, 0});
        while(!q.empty()){
            long l=q.size();
            long start= q.front().second;
            long end= q.back().second;
            width = max(width, end-start+1);
            for(int i=0;i<l;i++){
                pair<TreeNode*, int> temp= q.front();
                q.pop();
                if(temp.first->left)
                    q.push({temp.first->left, (long)2 *temp.second +1});
                if(temp.first->right)
                    q.push({temp.first->right, (long)2 *temp.second +2});
            }
        }
        return width;
    }
};
