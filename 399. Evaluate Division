You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.


Example 1:
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0

Example 2:
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

=============================================================================================================================================================================================

# Code of the above question  

class Solution {
public:
    unordered_map<string,vector<pair<string,double>>> adj;
    double bfs(string src,string d)
    {
        queue<pair<string,double>> q;
        q.push({src,1.0});
        unordered_map<string,int> vis;
        while(!q.empty())
        {
            int sz=q.size();
            while(sz--)
            {
                auto x=q.front();
                q.pop();
                string node=x.first;
                double dis=x.second;
                vis[node]++;
                if(node==d)
                 return dis;
                for(auto& c:adj[node])
                {
                    if(vis.find(c.first)==vis.end())
                    {
                        q.push({c.first,dis*c.second});
                    }
                }
            }
        }
        return -1;
    }
    
    vector<double> calcEquation(vector<vector<string>>& a, vector<double>& b, vector<vector<string>>& q) {
        
        int n=a.size();
        for(int i=0;i<n;i++)
         {
            adj[a[i][0]].push_back({a[i][1],b[i]});
            adj[a[i][1]].push_back({a[i][0],1/b[i]});
         }

         vector<double> ans;
         for(auto& x:q)
         {
            if(adj.find(x[0])==adj.end() || adj.find(x[1])==adj.end())
             ans.push_back(-1);
            else
            {
                ans.push_back(bfs(x[0],x[1]));
            }
         }

         return ans;

         
    }
};
