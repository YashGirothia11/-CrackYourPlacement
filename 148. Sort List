Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: [] 

Constraints:
The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105

==========================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (head == nullptr) {
            return nullptr;
        }
        if (head->next == nullptr) {
            return head;
        }
        std::vector<int> elements;
        ListNode* current = head;
        while (current != nullptr) {
            elements.push_back(current->val);
            current = current->next;
        }
        std::sort(elements.begin(), elements.end());
        ListNode* result = new ListNode(elements[0]);
        ListNode* resultPointer = result;
        for (size_t i = 1; i < elements.size(); ++i) {
            resultPointer->next = new ListNode(elements[i]);
            resultPointer = resultPointer->next;
        }
        return result;
    }
};
