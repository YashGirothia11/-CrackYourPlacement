Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.


Example 1:
Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Example 2:
Input: s = "a"
Output: [["a"]]
 
Constraints:
1 <= s.length <= 16
s contains only lowercase English letters.

====================================================================================================================================================================================

# Code of the above question 

class Solution {
public:

    vector<vector<string>> ans;
    vector<string> candidate;
    bool is_palindrome(string s, int l, int r)
    {
        while(l < r)
        {
            if(s[l] != s[r])
                return false;
            l++;
            r--;
        }
        return true;
    }
    void solve(string s, int i, int previous)
    {
        if(i == s.length())
        {
            if(is_palindrome(s, previous, i))
                ans.push_back(candidate);
        }
        else 
        {
            if(is_palindrome(s, previous, i))
            {
                candidate.push_back(s.substr(previous, i-previous+1));
                solve(s, i+1, i+1);
                candidate.pop_back();
            }
            solve(s, i+1, previous);
        }
    }
    vector<vector<string>> partition(string s)
    {
        solve(s, 0, 0);
        return ans;
    }
};
