Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
 

Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000

================================================================================================================================================================================================

# Code of the above question  

class Codec {
public:
    string serialize(TreeNode* root) {
        if(root == nullptr) return "$"; 
        string serialized_string = "";
        queue<TreeNode*> q;
        q.push(root); 
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if (node) {
                serialized_string.append(to_string(node->val) + ",");
                q.push(node->left);
                q.push(node->right);
            } else {
                serialized_string += "$,";
            }
        }
        return serialized_string;
    }
    TreeNode* deserialize(string data) {
  if(data == "$") return nullptr;
        stringstream ss(data);
        string item;
        getline(ss, item, ',');
        TreeNode* root = new TreeNode(stoi(item));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (getline(ss, item, ',')) {
                if (item != "$") {
                    TreeNode* leftNode = new TreeNode(stoi(item));
                    node->left = leftNode;
                    q.push(leftNode);
                }
            }
            if (getline(ss, item, ',')) {
                if (item != "$") {
                    TreeNode* rightNode = new TreeNode(stoi(item));
                    node->right = rightNode;
                    q.push(rightNode);
                }
            }
        }
        return root;
    }
};
