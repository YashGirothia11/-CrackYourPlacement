Your task is to implement  2 stacks in one array efficiently. You need to implement 4 methods.
twoStacks : Initialize the data structures and variables to be used to implement  2 stacks in one array.
push1 : pushes element into first stack.
push2 : pushes element into second stack.
pop1 : pops element from first stack and returns the popped element. If first stack is empty, it should return -1.
pop2 : pops element from second stack and returns the popped element. If second stack is empty, it should return -1.


Example 1:
Input:
push1(2)
push1(3)
push2(4)
pop1()
pop2()
pop2()
Output:
3 4 -1
Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push2(4) the stack2 will be {4}
pop1()   the poped element will be 3 from stack1 and stack1 will be {2}
pop2()   the poped element will be 4 from stack2 and now stack2 is empty
pop2()   the stack2 is now empty hence returned -1.

Example 2:
Input:
push1(1)
push2(2)
pop1()
push1(3)
pop1()
pop1()
Output:
1 3 -1
Explanation:
push1(1) the stack1 will be {1}
push2(2) the stack2 will be {2}
pop1()   the poped element will be 1 from stack1 and stack1 will be empty
push1(3) the stack1 will be {3}
pop1()   the poped element will be 3 from stack1 and stack1 will be empty
pop1()   the stack1 is now empty hence returned -1.

==========================================================================================================================================================================

# Code of the above question 

#include <bits/stdc++.h> 
using namespace std; 

class twoStacks { 
	int* arr; 
	int size; 
	int top1, top2; 

public: 
	twoStacks(int n) 
	{ 
		size = n; 
		arr = new int[n]; 
		top1 = n / 2 + 1; 
		top2 = n / 2; 
	} 
	void push1(int x) 
	{ 
		if (top1 > 0) { 
			top1--; 
			arr[top1] = x; 
		} 
		else { 
			cout << "Stack Overflow"
				<< " By element : " << x << endl; 
			return; 
		} 
	}  
	void push2(int x) 
	{ 
		if (top2 < size - 1) { 
			top2++; 
			arr[top2] = x; 
		} 
		else { 
			cout << "Stack Overflow"
				<< " By element : " << x << endl; 
			return; 
		} 
	} 
	int pop1() 
	{ 
		if (top1 <= size / 2) { 
			int x = arr[top1]; 
			top1++; 
			return x; 
		} 
		else { 
			cout << "Stack UnderFlow"; 
			exit(1); 
		} 
	} 
	int pop2() 
	{ 
		if (top2 >= size / 2 + 1) { 
			int x = arr[top2]; 
			top2--; 
			return x; 
		} 
		else { 
			cout << "Stack UnderFlow" << endl; 
			exit(1); 
		} 
	} 
}; 
int main() 
{ 
	twoStacks ts(5); 
	ts.push1(5); 
	ts.push2(10); 
	ts.push2(15); 
	ts.push1(11); 
	ts.push2(7); 
	cout << "Popped element from stack1 is "
		<< ": " << ts.pop1() << endl; 
	ts.push2(40); 
	cout << "Popped element from stack2 is "
		<< ": " << ts.pop2() << endl; 
	return 0; 
}
