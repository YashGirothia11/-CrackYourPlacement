Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
 

Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]

Constraints:
The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

====================================================================================================================================================================================

# Code of the above question 

int speedup = []{ios::sync_with_stdio(0); cin.tie(0); return 0;}();
class Solution {
public:
    void insert(ListNode* &head,int val){
        if(head==NULL){
            head=new ListNode(val);
            return;
        }
        ListNode *n=new ListNode(val);
        n->next=head;
        head=n;
    }
    void reverse(ListNode *&head){
        ListNode *prev=NULL;
        ListNode *curr=head;
        ListNode *temp;
        while(curr!=NULL){
            temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        head=prev;
        return;
    }
    ListNode* partition(ListNode* head, int x) {
        ListNode* res=NULL;
        ListNode* temp1=head;
        while(temp1){
            if(temp1->val<x){
                insert(res,temp1->val);
            }
            temp1=temp1->next;
        }
        ListNode* temp2=head;
        while(temp2){
            if(temp2->val>=x){
                insert(res,temp2->val);
            }
            temp2=temp2->next;
        }
        reverse(res);
        return res;
    }
};
