In this problem, a tree is an undirected graph that is connected and has no cycles.
You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.
 

Example 1:
Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]

====================================================================================================================================================================================

# Code of the above question  

class Solution {
public:
    vector<int>parent;
    vector<int>rank;
    int find(int i)
    {
        if(i == parent[i])
                return  i;
        return parent[i]=find(parent[i]);
    }
    void Union(int x ,int y)
    {
        int x_parent = find(x);
        int y_parent = find(y);
        if(x_parent == y_parent)
        return;
        if(rank[x_parent]>rank[y_parent])
        {
            parent[y_parent]=x_parent;
        }
        else if(rank[x_parent]<rank[y_parent])
        {
            parent[x_parent]=y_parent;
        }
        else{
            rank[x_parent]++;
            parent[y_parent]=x_parent;
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        parent.resize(edges.size()+1);
        rank.resize(edges.size()+1,0);
        for(int i = 1;i<=edges.size();i++)
        {
            parent[i]=i;
        }
        for(auto edge : edges)
        {
            int x_parent = find(edge[0]);
            int y_parent = find(edge[1]);
            if(x_parent == y_parent)
            {
                return edge;
            }
            else{
                Union(edge[0],edge[1]);
            }
        }
        return {};
    }
};
