Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.
If there exist multiple answers, you can return any of them.
 

Example 1:
Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]

Example 2:
Input: preorder = [1], postorder = [1]
Output: [1]
 

Constraints:
1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.

===========================================================================================================================================================================

# Code of the above question 

class Solution {
private:
    int search(vector<int>& postorder,int start,int end,int num)
    {
        for(int i=start;i<=end;i++)
        {
            if(postorder[i] == num)
            {
                return i;
            }
        }
        return -1;
    }
    int preindex = 0;
    TreeNode* solve(vector<int>&preorder,vector<int>&postorder,int start,int end)
    {
        if(start > end || preindex >= preorder.size())
            return nullptr;
        int num = preorder[preindex];
        preindex++;
        TreeNode*root = new TreeNode(num);
        if(preindex >= preorder.size() || start == end)
            return root;
        int postindex = search(postorder,start,end,preorder[preindex]);        
        root->left = solve(preorder,postorder,start,postindex);
        root->right = solve(preorder,postorder,postindex + 1,end - 1);
        return root;
    }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        return solve(preorder,postorder,0,preorder.size()-1);
    }
};
