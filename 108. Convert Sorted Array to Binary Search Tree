Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced
 binary search tree.


Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    
    TreeNode* bst(vector<int>& nums,int left,int right){
        
        if(left>right)return NULL;
        int mid=(left+right)/2;
        
        TreeNode* root=new TreeNode(nums[mid]);
        root->left=bst(nums,left,mid-1);
        root->right=bst(nums,mid+1,right);
        return root;
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        
        int n=nums.size();
        if(n==0)return NULL;
        return bst(nums,0,n-1);
    }
};
