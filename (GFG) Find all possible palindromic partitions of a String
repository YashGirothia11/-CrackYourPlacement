Given a String S, Find all possible Palindromic partitions of the given String.
 

Example 1:
Input:
S = "geeks"
Output:
g e e k s
g ee k s
Explanation:
All possible palindromic partitions are printed.

Example 2:
Input:
S = "madam"
Output:
m a d a m
m ada m
madam

================================================================================================================================================================================================

# Code of the above question 

#include <bits/stdc++.h>
using namespace std;
class GFG {
public:
    bool checkPalindrome(string& s)
    {
        int n = s.size();
        int i = 0, j = n - 1;
        while (i < j) {
            if (s[i] != s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    void Partition(vector<vector<string> >& res, string& s,
                   int idx, vector<string>& curr)
    {
        if (idx == s.size()) {
            res.push_back(curr);
            return;
        }
        string t;
        for (int i = idx; i < s.size(); i++) {
            t.push_back(s[i]);
            if (checkPalindrome(t)) {
                curr.push_back(t);
                Partition(res, s, i + 1, curr);
                curr.pop_back();
            }
        }
    }
};
int main()
{
    GFG ob;
    vector<vector<string> > res;
    string s = "geeks";
    int idx = 0;
    vector<string> curr;
    ob.Partition(res, s, idx, curr);
    for (auto& v : res) {
        for (auto& it : v) {
            cout << it << " ";
        }
        cout << "\n";
    }
    return 0;
}
