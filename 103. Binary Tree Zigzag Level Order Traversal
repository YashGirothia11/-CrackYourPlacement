Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
 

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

================================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    vector<vector<int>> res;
    if(!root) return res;
    deque<TreeNode*> dq;
    int level=0;
    dq.push_back(root);
    while(!dq.empty()){
        int l=dq.size();
        vector<int> temp;
        for(int i=0;i<l;i++){
            if(level%2==0){
                TreeNode* node= dq.back();
                dq.pop_back();
                temp.push_back(node->val);
                if(node->left) dq.push_front(node->left);
                if(node->right) dq.push_front(node->right);
            }
            else{
                TreeNode* node= dq.front();
                dq.pop_front();
                temp.push_back(node->val);
                if(node->right) dq.push_back(node->right);
                if(node->left) dq.push_back(node->left);
            }
        }
        level++;
        res.push_back(temp);
    }
    return res;
    }
};
