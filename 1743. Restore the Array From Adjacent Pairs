There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.
You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.
It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.
Return the original array nums. If there are multiple solutions, return any of them.


Example 1:
Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.

Example 2:
Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.

Example 3:
Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]
 
Constraints:
nums.length == n
adjacentPairs.length == n - 1
adjacentPairs[i].length == 2
2 <= n <= 105
-105 <= nums[i], ui, vi <= 105
There exists some nums that has adjacentPairs as its pairs.

==========================================================================================================================================================================

# Code of the above question 

#pragma GCC optimize("O3")
class Solution {
public:
    unordered_map<int, vector<int>> adj;
    void build_adj(vector<vector<int>>& adjacentPairs){
        #pragma unroll
        for(auto& e: adjacentPairs){
            int v0=e[0], v1=e[1];
            if (adj.count(v0)) adj[v0].push_back(v1);
            else adj[v0]={v1};
            if (adj.count(v1)) adj[v1].push_back(v0);
            else adj[v1]={v0};
        }
    }
    vector<int> ans;
    void dfs(int i, int prev){
        ans.push_back(i);
        #pragma unroll
        for(int j: adj[i]){
            if (j==prev) continue;
            dfs(j, i);
        }
    }
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        build_adj(adjacentPairs);
        int root=INT_MAX;
        #pragma unroll
        for(auto& [i, vec]: adj){
            if (vec.size()==1){
                root=i;
                break;
            }
        }
        ans.reserve(adjacentPairs.size()+1);
        dfs(root, INT_MAX);
        return ans;
    }
};
auto init = []()
{ 
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
