Given an integer n denoting the Length of a line segment. You need to cut the line segment in such a way that the cut length of a line segment each time is either x , y or z. Here x, y, and z are integers.
After performing all the cut operations, your total number of cut segments must be maximum. Return the maximum number of cut segments possible.

Note: if no segment can be cut then return 0.

Examples:

Input: n = 4, x = 2, y = 1, z = 1
Output: 4
Explanation: Total length is 4, and the cut
lengths are 2, 1 and 1.  We can make
maximum 4 segments each of length 1.

Input: n = 5, x = 5, y = 3, z = 2
Output: 2
Explanation: Here total length is 5, and
the cut lengths are 5, 3 and 2. We can
make two segments of lengths 3 and 2.
Expected Time Complexity : O(n)
Expected Auxiliary Space: O(n)

========================================================================================================================================================================

# Code of the above question 

#include<bits/stdc++.h>
using namespace std;
int findMaxSegments(int a[],int target,int n,int count)
{
    if(n == 0 && target > 0)
    return 0;
    if(target == 0)    
    return count;
    if(a[n-1] <= target)
    return max(findMaxSegments(a,target-a[n-1],n,count+1),findMaxSegments(a,target,n-1,count));
    else
    return findMaxSegments(a,target,n-1,count);
}
int main()
 {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int queries;
    cin>>queries;
    while(queries--)
    {
        int sum;
        cin>>sum;
        int arr[3];
        for(int i=0;i<3;i++)
        cin>>arr[i];
        int count = findMaxSegments(arr,sum,3,0);
        cout<<count<<"\n";
    }
    return 0;
}
