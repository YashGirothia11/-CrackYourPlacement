Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.
 

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 
Constraints:
The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

========================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        stack<ListNode*> st;
        ListNode* temp = head;
        ListNode* ans = new ListNode();
        ListNode* dummy = ans;
        int ind = k;
        ListNode* cur = head;
        int cnt = 0;
        while (cur) {
            cnt++;
            cur = cur->next;
        }
        while(cnt >= k){
            int remaining = k;
            while (remaining > 0 && temp) {
                st.push(temp);
                cout << temp -> val;
                temp = temp->next;
                remaining--;
            }
            while (!st.empty()) {
                ListNode* node = st.top();
                st.pop();
                dummy->next = node; 
                dummy = dummy->next;
            }
            cnt -= k;
        }
        dummy -> next = temp;
        return ans -> next;
    }
};
int init = [](){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 0;
}();
