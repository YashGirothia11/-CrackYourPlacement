Given an integer array. The task is to find the maximum of the minimum of every window size in the array.
Note: Window size varies from 1 to the size of the Array.


Example 1:
Input:
N = 7
arr[] = {10,20,30,50,10,70,30}
Output: 70 30 20 10 10 10 10 
Explanation: 
1.First element in output indicates maximum of minimums of all windows of size 1.
2.Minimums of windows of size 1 are {10},  {20}, {30}, {50},{10}, {70} and {30}.  Maximum of these minimums is 70. 
3. Second element in output indicates maximum of minimums of all windows of size 2. 
4. Minimums of windows of size 2 are {10}, {20}, {30}, {10}, {10}, and {30}.
5. Maximum of these minimums is 30 Third element in output indicates maximum of minimums of all windows of size 3. 
6. Minimums of windows of size 3 are {10}, {20}, {10}, {10} and {10}.
7.Maximum of these minimums is 20. Similarly other elements of output are computed.

Example 2:
Input:
N = 3
arr[] = {10,20,30}
Output: 30 20 10
Explanation: First element in output indicates maximum of minimums of all windows of size 1.Minimums of windows of size 1 are {10} , {20} , {30}.
Maximum of these minimums are 30 and similarly other outputs can be computed

=======================================================================================================================================================================

# Code of the abobe question  

#include <bits/stdc++.h>
using namespace std;
void printMaxOfMin(int arr[], int n)
{
	for (int k = 1; k <= n; k++) {
		int maxOfMin = INT_MIN;
		for (int i = 0; i <= n - k; i++) {
			int min = arr[i];
			for (int j = 1; j < k; j++) {
				if (arr[i + j] < min)
					min = arr[i + j];
			}
			if (min > maxOfMin)
				maxOfMin = min;
		}
		cout << maxOfMin << " ";
	}
}
int main()
{
	int arr[] = { 10, 20, 30, 50, 10, 70, 30 };
	int n = sizeof(arr) / sizeof(arr[0]);
	printMaxOfMin(arr, n);
	return 0;
}
