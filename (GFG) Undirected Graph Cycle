Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.


Example 1:
Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 
1->2->3->4->1 is a cycle.

Example 2:
Input: 
V = 4, E = 2
adj = {{}, {2}, {1, 3}, {2}}
Output: 0
Explanation: 
No cycle in the graph.

=========================================================================================================================================================

# Code of the above question 

#include "bits/stdc++.h"
using namespace std;
bool dfs(const int& nd, int par, vector<bool>& vis, vector<int>& parents, const vector<vector<int>>& g) {
    vis[nd] = true;
    for (const int& u : g[nd]) {
        if (u == par)
            continue;
        if (vis[u])
            return true;
        parents[u] = nd;
        if (dfs(u, parents[u], vis, parents, g))
            return true;
    }
    return false;
}

bool isCyclic(const vector<vector<int>>& graph) {
    int sz = graph.size();
    vector<bool>vis(sz, false);
    vector<int>parents(sz, -1);
    for (int i = 0; i < sz; i++)
        if (!vis[i] && dfs(i, parents[i], vis, parents, graph))
            return true;
    return false;
}
int main() {
    int n, e;
    cin >> n >> e;
    vector<vector<int>>graph(n, vector<int>());
    for (int i = 0;i < e;++i) {
        int u, v;
        cin >> u >> v;
        if (u == v) {
            cout << "YES" << endl;
            return 0;
        }
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    cout << (isCyclic(graph) ? "YES" : "NO") << endl;
    return 0;
}
