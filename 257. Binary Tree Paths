Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.

 
Example 1:
Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
 

Constraints:
The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

=========================================================================================================================================================

# Code of the above question 

class Solution {
public:
    
    string convert(vector<int>& path){
        string ans="";
        int n = path.size();
        for(int i=0;i<n-1;i++){
            ans+=to_string(path[i]);
            ans.push_back('-');
            ans.push_back('>');
        }
        ans+=to_string(path[n-1]);
        return ans;
    }
    
    void solve(TreeNode* root, vector<int>& path,vector<string>& ans){
        if(root == NULL) return;
        if(root->left == NULL && root->right == NULL){
            path.push_back(root->val);
            ans.push_back(convert(path));
            path.pop_back();
            return;
        }
        path.push_back(root->val);
        solve(root->left,path,ans);
        solve(root->right,path,ans);
        path.pop_back();
        return;
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>ans;
        vector<int>path;
        solve(root,path,ans);
        return ans;
    }
};
