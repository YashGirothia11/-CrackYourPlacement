Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.


Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444

====================================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    static const int m = 1e9 + 7;
    int sumSubarrayMins(vector<int>& A) {
        stack<int> l,r;
        int n = A.size(),   bounds[n][2];
        for(int i=0;i<n;++i){
            while(!l.empty() && A[l.top()] > A[i])    l.pop();
            if(l.empty())   bounds[i][0] = -1;
            else bounds[i][0] = l.top();
            l.push(i);
            while(!r.empty() && A[n-1-i] <= A[r.top()])    r.pop();
            if(r.empty())   bounds[n-1-i][1] = n;
            else bounds[n-1-i][1] = r.top();
            r.push(n-1-i);
        }
        long res = 0;
        for(int i=0;i<n;++i){
            res = (res + (A[i] * ((i - bounds[i][0]) * (long) (bounds[i][1] - i))%m)%m)%m;
        }
        return res;
    }
};
