Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.


Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 

Constraints:
1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1

====================================================================================================================================================================================

# Code of the above question 

class Solution
{
public:
    vector<int> prevSmaller(vector<int> &heights, int n)
    {
        stack<int> st;
        st.push(-1);
        vector<int> ans(n);
        for (int i = 0; i < n; ++i)
        {
            int curr = heights[i];
            while (st.top() != -1 && heights[st.top()] >= curr)
            {
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    int solve(vector<int> &heights)
    {
        int r = 0;
        int n = heights.size();
        vector<int> prev = prevSmaller(heights, n);
        for (int i = 0; i < n; i++)
        {
            bool is_sq = true;
            for (int h = 0; h < heights[i]; h++)
            {
                if (h > i)
                {
                    break;
                }
                for (int x = i; x >= i - h; x--)
                {
                    if (heights[x] < h + 1)
                    {
                        is_sq = false;
                        break;
                    }
                }
                if (!is_sq)
                {
                    break;
                }
                r += 1;
            }
        }
        return r;
    }
    int countSquares(vector<vector<int>> &matrix)
    {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<int> heights(col, 0);
        int maxi = 0;
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                if (matrix[i][j] == 1)
                    heights[j]++;
                else
                    heights[j] = 0;
            }
            maxi += solve(heights);
        }
        return maxi;
    }
};
