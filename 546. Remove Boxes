You are given several boxes with different colors represented by different positive numbers.
You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.
Return the maximum points you can get.
 

Example 1:
Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
Explanation:
[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)

Example 2:
Input: boxes = [1,1,1]
Output: 9

Example 3:
Input: boxes = [1]
Output: 1
 

Constraints:
1 <= boxes.length <= 100
1 <= boxes[i] <= 100

====================================================================================================================================================================================

# Code of the above question  

class Solution {
public:
    int solve(int l , int r , vector < int > & boxes , int k , int dp[101][101][101]){
        if(l > r) return 0; 
        int k_here = k; 
        int l_here = l; 
        if(dp[l][r][k_here] >= 0) return dp[l][r][k];  
        while(l+1 <= r && boxes[l] == boxes[l+1]) {
            k++; 
            l++; 
        }
        int ans = (k+1)*(k+1) + solve(l+1 , r , boxes , 0 , dp); 
        for(int m = l+1 ; m <=r ; m++){
            if(boxes[l] == boxes[m]){
                ans = max(ans , solve(m , r, boxes , k+1 , dp) + solve(l+1 , m-1 , boxes , 0 , dp)); 

            }
        }
        return dp[l_here][r][k_here] = ans; 
    }
    int removeBoxes(vector<int>& boxes) {
        int dp[101][101][101]; 
        memset(dp , -1 , sizeof(dp)); 
        int n = boxes.size(); 
        return solve(0 , n-1 , boxes , 0 , dp);         
    }
};
