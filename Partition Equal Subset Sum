Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.


Example 1:
Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.

Example 2:
Input: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.

===========================================================================================================================================================================

# Code of the above question

#include <bits/stdc++.h>
using namespace std;
bool isSubsetSum(vector<int>& arr, int n, int sum) {
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
    if (arr[n - 1] > sum)
        return isSubsetSum(arr, n - 1, sum);
    return isSubsetSum(arr, n - 1, sum) || 
           isSubsetSum(arr, n - 1, sum - arr[n - 1]);
}
bool findPartition(vector<int>& arr) {
    int sum = accumulate(arr.begin(), arr.end(), 0);
    if (sum % 2 != 0)
        return false;
    return isSubsetSum(arr, arr.size(), sum / 2);
}
int main() {
    vector<int> arr = { 3, 1, 5, 9, 12 };
    cout << (findPartition(arr) ? "True" : "False");
    return 0;
}
