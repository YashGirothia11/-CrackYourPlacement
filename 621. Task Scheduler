You are given an array of CPU tasks, each represented by letters A to Z, and a cooling time, n. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: identical tasks must be separated by at least n intervals due to cooling time.
â€‹Return the minimum number of intervals required to complete all tasks.
 

Example 1:
Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.
After completing task A, you must wait two cycles before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th cycle, you can do A again as 2 intervals have passed.

Example 2:
Input: tasks = ["A","C","A","B","D","B"], n = 1
Output: 6
Explanation: A possible sequence is: A -> B -> C -> D -> A -> B.
With a cooling interval of 1, you can repeat a task after just one other task.

Example 3:
Input: tasks = ["A","A","A", "B","B","B"], n = 3
Output: 10
Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.
There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks. 

Constraints:
1 <= tasks.length <= 104
tasks[i] is an uppercase English letter.
0 <= n <= 100

===============================================================================================================================================================================

# Code of the above question  

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char, int> frequencies;
        for (char task : tasks) {
            frequencies[task]++;
        }
        vector<int> sortedFrequencies;
        for (auto& pair : frequencies) {
            sortedFrequencies.push_back(pair.second);
        }
        sort(sortedFrequencies.begin(), sortedFrequencies.end());
        int maxFreq = sortedFrequencies.back();
        sortedFrequencies.pop_back();
        int idleTime = (maxFreq - 1) * n;
        while (!sortedFrequencies.empty() && idleTime > 0) {
            idleTime -= min(maxFreq - 1, sortedFrequencies.back());
            sortedFrequencies.pop_back();
        }
        idleTime = max(0, idleTime);
        return tasks.size() + idleTime;
    }
};
