You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by bursting the balloons wisely.


Example 1:
Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

Constraints:
n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100

=============================================================================================================================================================================================

# Code of the above question 

class Solution {
public:
    int dfs(vector<int>& nums, vector<vector<int>> &dp, int left, int right){
        if(left > right){
            return 0;
        }
        if(dp[left][right] > 0)
            return dp[left][right];
        int result = 0;
        for(int i=left; i<=right; i++){
            int gain = nums[left-1]*nums[i]*nums[right+1];
            int remaining = dfs(nums, dp, left, i-1) + dfs(nums, dp, i+1, right);
            result = max(result, remaining+gain);
        }
        dp[left][right] = result;
        return result;
    }

    int maxCoins(vector<int>& nums) {
        int total = 0;
        nums.push_back(1);
        nums.insert(nums.begin(), 1);
        vector<vector<int>>  dp(nums.size(), vector<int>(nums.size(), 0));
        return dfs(nums, dp, 1, nums.size()-2);
    }
};
