Given a singly linked list, remove all the nodes in the list which have any node on their right whose value is greater. (Not just immediate Right , but entire List on the Right)

Example 1:
Input: LinkedList = 12->15->10->11->5->6->2->3
Output: 15 11 6 3
Explanation: Since, 12, 10, 5 and 2 are the elements which have greater elements on the following nodes. So, after deleting them, the linked list would like be 15, 11, 6, 3.

Example 2:
Input: LinkedList = 10->20->30->40->50->60
Output: 60
Explanation: All the nodes except the last node has a greater value node on its right, so all the nodes except the last node must be removed.
Your Task: The task is to complete the function compute() which should modify the list as required and return the head of the modified linked list. The printing is done by the driver code,

Constraints:
1 ≤ size of linked list ≤ 105
1 ≤ element of linked list ≤ 105

====================================================================================================================================================================================

# Code of the above question 

#include <bits/stdc++.h>
using namespace std;
struct Node
{
	int data;
	struct Node* next;
};
void reverseList(struct Node** headref);
void _delLesserNodes(struct Node* head);
void delLesserNodes(struct Node** head_ref)
{
	reverseList(head_ref):
	_delLesserNodes(*head_ref);
	reverseList(head_ref);
}
void _delLesserNodes(struct Node* head)
{
	struct Node* current = head;
	struct Node* maxnode = head;
	struct Node* temp;
	while (current != NULL && 
		current->next != NULL) 
	{
		if (current->next->data < maxnode->data) 
		{
			temp = current->next;
			current->next = temp->next;
			free(temp);
		}
		else
		{
			current = current->next;
			maxnode = current;
		}
	}
}
void push(struct Node** head_ref, int new_data)
{
	struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
	new_node->data = new_data;
	new_node->next = *head_ref;
	*head_ref = new_node;
}
void reverseList(struct Node** headref)
{
	struct Node* current = *headref;
	struct Node* prev = NULL;
	struct Node* next;
	while (current != NULL) 
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	*headref = prev;
}
void printList(struct Node* head)
{
	while (head != NULL) 
	{
		cout << " " << head->data ;
		head = head->next;
	}
	cout << "\n" ;
}
int main()
{
	struct Node* head = NULL;
	push(&head, 3);
	push(&head, 2);
	push(&head, 6);
	push(&head, 5);
	push(&head, 11);
	push(&head, 10);
	push(&head, 15);
	push(&head, 12);
	cout << "Given Linked List \n" ;
	printList(head);
	delLesserNodes(&head);
	cout << "Modified Linked List \n" ;
	printList(head);
	return 0;
}
