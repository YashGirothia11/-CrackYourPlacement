Given an m x n integers matrix, return the length of the longest increasing path in matrix.
From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 
Example 1:
Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:
Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

Example 3:
Input: matrix = [[1]]
Output: 1

===============================================================================================================================================================================

# Code of the above question  

class Solution {
    vector<vector<int>> dp;
    int dr[4] = {-1,0,1,0};
    int dc[4] = {0,-1,0,1};
public:
    int dfs(int row, int col, vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();
        if (dp[row][col] != 0) {
            return dp[row][col];
        }
        int maxLength = 1;
        for (int k=0; k<4; k++) {
            int nr = row + dr[k];
            int nc = col + dc[k];
            if (nr>=0 && nr<m && nc>=0 && nc<n && mat[nr][nc] > mat[row][col]) {
                maxLength = max(maxLength, 1 + dfs(nr, nc, mat));
            }
        }
        return dp[row][col] = maxLength;
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        dp = vector<vector<int>>(m, vector<int>(n, 0));
        int maxPath = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                maxPath = max(maxPath, dfs(i,j,matrix));
            }
        }
        return maxPath;
    }
};
